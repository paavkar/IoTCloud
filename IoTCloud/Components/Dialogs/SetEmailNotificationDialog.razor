@implements IDialogContentComponent<EmailNotification>
@inject IdentityUserAccessor UserAccessor

@* Header *@
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync" Disabled="@Disabled">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentStack>
            <FluentLabel Color="Color.Error">@Message</FluentLabel>
        </FluentStack>
        <FluentRadioGroup @bind-Value=Notification.ReadingType Label="Reading type of the data">
            @foreach (ReadingType item in Enum.GetValues<ReadingType>())
            {
                <FluentRadio Value="@item">@item</FluentRadio>
            }
        </FluentRadioGroup>

        <FluentRadioGroup Name="email" @bind-Value=EmailToUse Label="Use user account's email?">
            <FluentRadio Value="1">Yes</FluentRadio>
            <FluentRadio Value="2">No</FluentRadio>
        </FluentRadioGroup>

        @if (EmailToUse == 1)
        {
            Notification.Email = user.Email;
            <FluentTextField Id="account" TextFieldType="TextFieldType.Email" @bind-Value=Notification.Email Label="Email" ReadOnly="true" Style="width: 60%;" />
        }
        else
        {
            <FluentTextField Id="nonAccount" TextFieldType="TextFieldType.Email" @bind-Value=Notification.Email Label="Email" Style="width: 60%;" Required="true" />
        }

        <FluentRadioGroup @bind-Value=Notification.NotificationThreshold Label="Threshold type for the notification">
            <FluentRadio Value="Threshold.Under">Under</FluentRadio>
            <FluentRadio Value="Threshold.Over">Over</FluentRadio>
        </FluentRadioGroup>

        <FluentNumberField @bind-Value="@Notification.ThresholdValue" Label="Threshold value" HideStep="true" />

        <FluentTextArea @bind-Value=Notification.NotificationMessage Resize="TextAreaResize.Both" Label="Notification message for the email" Style="width: 60%;" />
    </FluentStack>
</FluentDialogBody>


@code {
    int? EmailToUse = 2;
    bool Disabled = false;
    string Message = string.Empty;
    private ApplicationUser user = default!;
    [Parameter]
    public EmailNotification Content { get; set; } = default!;
    public EmailNotification Notification { get; set; } = new();

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync();
        if (Content.Email == user.Email) EmailToUse = 1;

        Notification.Id = Content.Id;
        Notification.Email = Content.Email;
        Notification.UserId = Content.UserId;
        Notification.NotificationMessage = Content.NotificationMessage;
        Notification.NotificationThreshold = Content.NotificationThreshold;
        Notification.ReadingType = Content.ReadingType;
        Notification.ThresholdValue = Content.ThresholdValue;

    }

    private async Task SaveAsync()
    {
        if (Notification.Email.Length < 5)
        {
            Message = "Add an email before continuing";
            return;
        }
        Message = string.Empty;
        Content.Id = Notification.Id;
        Content.Email = Notification.Email;
        Content.UserId = Notification.UserId;
        Content.NotificationMessage = Notification.NotificationMessage;
        Content.NotificationThreshold = Notification.NotificationThreshold;
        Content.ReadingType = Notification.ReadingType;
        Content.ThresholdValue = Notification.ThresholdValue;
        await Dialog.CloseAsync(Content);
    }

    public void CheckEmail(ChangeEventArgs e)
    {
        Console.WriteLine(e.Value.ToString());
        if (e.Value!.ToString()!.Length < 5) Disabled = true;
        else Disabled = false;
    }


    private async Task CancelAsync()
    {
        Notification.Id = Content.Id;
        Notification.Email = Content.Email;
        Notification.UserId = Content.UserId;
        Notification.NotificationMessage = Content.NotificationMessage;
        Notification.NotificationThreshold = Content.NotificationThreshold;
        Notification.ReadingType = Content.ReadingType;
        Notification.ThresholdValue = Content.ThresholdValue;
        await Dialog.CancelAsync();
    }
}
