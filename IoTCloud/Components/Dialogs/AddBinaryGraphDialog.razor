@implements IDialogContentComponent<BinaryGraphItem>

@* Header *@
<FluentDialogHeader>
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentRadioGroup @bind-Value=Content.ReadingType Label="Reading type of the data">
            @foreach (ReadingType item in Enum.GetValues<ReadingType>())
            {
                if (item != ReadingType.Binary)
                {
                    <FluentRadio Value="@item">@item</FluentRadio>
                }
            }
        </FluentRadioGroup>

        <FluentTextField @bind-Value="@Content.Name">Graph title:</FluentTextField>

        <FluentTextField @bind-Value="@Content.SensorName">What sensor should this graph be for?</FluentTextField>
    </FluentStack>
</FluentDialogBody>

@code {
    [Parameter]
    public BinaryGraphItem Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    private async Task SaveAsync()
    {
        await Dialog.CloseAsync(Content);
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
}
