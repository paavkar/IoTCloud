@implements IDialogContentComponent<Sensor>
@inject IdentityUserAccessor UserAccessor
@inject ISensorsService SensorsService

@* Header *@
<FluentDialogHeader>
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>

@* Footer *@
<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync" Disabled="@Disabled">Save</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

@* Body *@
<FluentDialogBody>
    <FluentStack Orientation="Orientation.Vertical">
        <FluentLabel Color="Color.Error">@Message</FluentLabel>

        @if (string.IsNullOrEmpty(Content.Name))
        {
            <FluentRadioGroup Style="margin-top: 1em;" @bind-Value=Sensor.ReadingType Label="Reading type of the data">
            @foreach (ReadingType item in Enum.GetValues<ReadingType>())
            {
                if (item != ReadingType.Binary)
                {
                    <FluentRadio Value="@item">@item</FluentRadio>
                }
            }
            </FluentRadioGroup>
        }
        else
        {
            <FluentRadioGroup Style="margin-top: 1em;" @bind-Value=Sensor.ReadingType Label="Reading type of the data" Disabled>
                @foreach (ReadingType item in Enum.GetValues<ReadingType>())
                {
                    if (item != ReadingType.Binary)
                    {
                        <FluentRadio Value="@item">@item</FluentRadio>
                    }
                }
            </FluentRadioGroup>
        }

        <FluentTextField Style="margin-top: 1em;" Label="Name for the sensor" @bind-Value=Sensor.Name />
    </FluentStack>
</FluentDialogBody>


@code {
    int? EmailToUse = 2;
    bool Disabled = false;
    string Message = string.Empty;
    private ApplicationUser user = default!;
    [Parameter]
    public Sensor Content { get; set; } = default!;
    public Sensor Sensor { get; set; } = new();

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync();
        if (!string.IsNullOrEmpty(Content.Name))
        {
            Sensor.Name = Content.Name;
            Sensor.ReadingType = Content.ReadingType;
        }
    }

    private async Task SaveAsync()
    {
        var sensorAlreadyExists = await SensorsService.CheckSensorExists(Sensor.Name.Trim().ToLower(), user.Id);

        if (!sensorAlreadyExists)
        {
            Content.Name = Sensor.Name.Trim().ToLower();
            Content.ReadingType = Sensor.ReadingType;
            await Dialog.CloseAsync(Content);
        }
        else Message = $"You already have a sensor with the name {Sensor.Name}. Choose a different name.";
    }

    private async Task CancelAsync()
    {
        await Dialog.CancelAsync();
    }
}
