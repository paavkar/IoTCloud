<FluentStack>
    @foreach (var item in Graphs)
    {
        switch (item.DataType)
        {
            case "DistanceReading":
                <ApexCharts.ApexChart TItem="DistanceReading"
                                      Title=@item.Name
                                      Height=300 Width=600
                                      @ref="DistanceChart">
                    <ApexCharts.ApexPointSeries TItem="DistanceReading"
                                                Items="DistanceReadings.Where(dr => dr.SensorName == item.SensorName).OrderBy(dr => dr.TimeOfMeasurement)"
                                                SeriesType=item.GraphType
                                                XValue="i => i.TimeOfMeasurement.ToLocalTime().DateTime.ToShortDateString() + Environment.NewLine + i.TimeOfMeasurement.ToLocalTime().DateTime.ToShortTimeString()"
                                                YValue="i => (decimal)i.Distance" />
                </ApexCharts.ApexChart>
                <FluentButton BackgroundColor="red" Color="white" Appearance="Appearance.Accent" OnClick="@(e => RemoveGraph(item.Id))">Remove Graph @item.Name</FluentButton>
                break;
            case "LuminosityReading":
                <ApexCharts.ApexChart TItem="LuminosityReading"
                                      Title=@item.Name
                                      Height=300 Width=600
                                      @ref="LuminosityChart">
                    <ApexCharts.ApexPointSeries TItem="LuminosityReading"
                                                Items="LuminosityReadings.Where(lr => lr.SensorName == item.SensorName).OrderBy(lr => lr.TimeOfMeasurement)"
                                                SeriesType=item.GraphType
                                                XValue="i => i.TimeOfMeasurement.ToLocalTime().DateTime.ToShortDateString() + Environment.NewLine + i.TimeOfMeasurement.ToLocalTime().DateTime.ToShortTimeString()"
                                                YValue="i => (decimal)i.Luminosity" />
                </ApexCharts.ApexChart>
                <FluentButton BackgroundColor="red" Color="white" Appearance="Appearance.Accent" OnClick="@(e => RemoveGraph(item.Id))">Remove Graph @item.Name</FluentButton>
                break;
            case "TemperatureReading":
                <ApexCharts.ApexChart TItem="TemperatureReading"
                                      Title=@item.Name
                                      Height=300 Width=600
                                      @ref="TemperatureChart">
                    <ApexCharts.ApexPointSeries TItem="TemperatureReading"
                                                Items="TemperatureReadings.Where(tr => tr.SensorName == item.SensorName).OrderBy(tr => tr.TimeOfMeasurement)"
                                                SeriesType=item.GraphType
                                                XValue="i => i.TimeOfMeasurement.ToLocalTime().DateTime.ToShortDateString() + Environment.NewLine + i.TimeOfMeasurement.ToLocalTime().DateTime.ToShortTimeString()"
                                                YValue="i => (decimal)i.Temperature" />
                </ApexCharts.ApexChart>
                <FluentButton BackgroundColor="red" Color="white" Appearance="Appearance.Accent" OnClick="@(e => RemoveGraph(item.Id))">Remove Graph @item.Name</FluentButton>
                break;
            case "VelocityReading":
                <ApexCharts.ApexChart TItem="VelocityReading"
                                      Title=@item.Name
                                      Height=300 Width=600
                                      @ref="VelocityChart">
                    <ApexCharts.ApexPointSeries TItem="VelocityReading"
                                                Items="VelocityReadings.Where(vr => vr.SensorName == item.SensorName).OrderBy(vr => vr.TimeOfMeasurement)"
                                                SeriesType=item.GraphType
                                                XValue="i => i.TimeOfMeasurement.ToLocalTime().DateTime.ToShortDateString() + Environment.NewLine + i.TimeOfMeasurement.ToLocalTime().DateTime.ToShortTimeString()"
                                                YValue="i => (decimal)i.Velocity" />
                </ApexCharts.ApexChart>
                <FluentButton BackgroundColor="red" Color="white" Appearance="Appearance.Accent" OnClick="@(e => RemoveGraph(item.Id))">Remove Graph @item.Name</FluentButton>
                break;
            case "HumidityReading":
                <ApexCharts.ApexChart TItem="HumidityReading"
                                      Title=@item.Name
                                      Height=300 Width=600
                                      @ref="HumidityChart">
                    <ApexCharts.ApexPointSeries TItem="HumidityReading"
                                                Items="HumidityReadings.Where(hr => hr.SensorName == item.SensorName).OrderBy(hr => hr.TimeOfMeasurement)"
                                                SeriesType=item.GraphType
                                                XValue="i => i.TimeOfMeasurement.ToLocalTime().DateTime.ToShortDateString() + Environment.NewLine + i.TimeOfMeasurement.ToLocalTime().DateTime.ToShortTimeString()"
                                                YValue="i => (decimal)i.Humidity" />
                </ApexCharts.ApexChart>
                <FluentButton BackgroundColor="red" Color="white" Appearance="Appearance.Accent" OnClick="@(e => RemoveGraph(item.Id))">Remove Graph @item.Name</FluentButton>
                break;
        }
    }
</FluentStack>

@code {
    [Parameter]
    public List<GraphItem> Graphs { get; set; } = new();
    [Parameter]
    public List<DistanceReading> DistanceReadings { get; set; } = new();
    [Parameter]
    public List<LuminosityReading> LuminosityReadings { get; set; } = new();
    [Parameter]
    public List<TemperatureReading> TemperatureReadings { get; set; } = new();
    [Parameter]
    public List<VelocityReading> VelocityReadings { get; set; } = new();
    [Parameter]
    public List<HumidityReading> HumidityReadings { get; set; } = new();
    [Parameter]
    public EventCallback<string> OnRemoveGraph { get; set; }


    private ApexCharts.ApexChart<DistanceReading> DistanceChart = new();
    private ApexCharts.ApexChart<LuminosityReading> LuminosityChart = new();
    private ApexCharts.ApexChart<TemperatureReading> TemperatureChart = new();
    private ApexCharts.ApexChart<VelocityReading> VelocityChart = new();
    private ApexCharts.ApexChart<HumidityReading> HumidityChart = new();

    private ApexCharts.ApexChartOptions<TemperatureReading> options { get; set; } = new();

    protected override void OnInitialized()
    {
        options = new()
        {
            Xaxis = new() 
            { 
                Labels = new() 
                { 
                    OffsetX = 0,
                }
            },
            Markers = new() 
            { 
                Size = 6, 
                Hover = new() 
                { 
                    Size = 6 
                } 
            }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await DistanceChart.UpdateSeriesAsync(true);
            await LuminosityChart.UpdateSeriesAsync(true);
            await TemperatureChart.UpdateSeriesAsync(true);
            await VelocityChart.UpdateSeriesAsync(true);
            await HumidityChart.UpdateSeriesAsync(true);
        }
    }

    private async Task RemoveGraph(string id)
    {
        await OnRemoveGraph.InvokeAsync(id);
    }
}
