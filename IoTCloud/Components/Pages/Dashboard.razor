@page "/dashboard"
@using System.Timers
@rendermode InteractiveServer

@implements IDisposable

@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager
@inject ClipboardService ClipboardService
@inject IUserService UserService
@inject IDialogService DialogService
@inject IReadingsService RS
@inject IGraphsService GS
@inject IToastService ToastService
@inject ISensorsService SensorsService

@attribute [Authorize]

<PageTitle>Dashboard</PageTitle>

<FluentLabel Typo="Typography.H3">Dashboard</FluentLabel>

<FluentStack Style="margin-top: 1em;">
    <FluentButton Style="margin-top: 0.6em;" BackgroundColor="green" Color="white" Appearance="Appearance.Accent" OnClick="CreateApiKey">Create new API Key</FluentButton>
    @if (!string.IsNullOrEmpty(ApiKey))
    {
        <FluentAccordion Style="margin-left: 1em; width: 40%;">
            <FluentAccordionItem Style="background-color: green;" Heading="Your API key">
                @ApiKey
                <FluentIcon Id="apiKeyTooltipIcon" OnClick="CopyToClipboard" Style="cursor: pointer;" Icon="Icons.Regular.Size20.Clipboard" />
                <FluentTooltip Anchor="apiKeyTooltipIcon">Click to copy API key.</FluentTooltip>
            </FluentAccordionItem>
        </FluentAccordion>

        <FluentButton Style="margin-top: 0.6em;" BackgroundColor="green" Color="white" Appearance="Appearance.Accent" OnClick="DeleteApiKey">Delete your API key</FluentButton>
    }
    else
    {
        <FluentLabel Style="margin-left: 1em; margin-top: 0.6em;">You do not have an existing API key. Click the button to create one.</FluentLabel>
    }
</FluentStack>

<FluentDivider Style="margin-top: 1em;" />

<FluentLabel Typo="Typography.H3">Sensor data</FluentLabel>

<FluentStack Style="margin-top: 1em;" Orientation="Orientation.Vertical">
    @if(!string.IsNullOrEmpty(ApiKey))
    {
        <FluentStack>
            <FluentButton BackgroundColor="green" Color="white" Appearance="Appearance.Accent" OnClick="AddSensor">Add Sensor</FluentButton>
            @if (Sensors.Any())
            {
                <FluentButton Style="margin-left: 1em;" BackgroundColor="green" Color="white" Appearance="Appearance.Accent" OnClick="SetupEmailNotification">Set up email notification</FluentButton>
    
                @if (EmailNotifications.Any())
                {
                    <FluentButton Style="margin-left: 1em;" BackgroundColor="green" Color="white" Appearance="Appearance.Accent" OnClick="OpenEmailNotificationsDialog">Open email notifications</FluentButton>
                }
            }
        </FluentStack>
        <FluentDataGrid Items="@Sensors.AsQueryable()" Pagination="Pagination">
            <PropertyColumn Title="Sensor name" Property="@(s => s.Name)" Sortable="true" />
            <PropertyColumn Title="Sensor creation time" Property="@(s => s.CreatedAt)" Sortable="true" />
            <PropertyColumn Title="Sensor modification time" Property="@(s => s.ModifiedAt)" Sortable="true" />
            <PropertyColumn Title="Sensor's data type" Property="@(s => s.ReadingType)" Sortable="true" />
            <TemplateColumn Title="Actions">
                <FluentButton IconStart="@(new Icons.Regular.Size16.Delete())" OnClick="@(e => DeleteSensor(context.Id))" />
            </TemplateColumn>
        </FluentDataGrid>
        <FluentPaginator  State="@Pagination" />
    }
    else
    {
        <FluentLabel Style="margin-top: 1em;" Typo="Typography.H5" Weight="FontWeight.Bold">Create an API Key first.</FluentLabel>
    }
</FluentStack>

@code {
    private ApplicationUser user = default!;

    PaginationState Pagination = new PaginationState { ItemsPerPage = 10 };

    private string? ApiKey { get; set; }

    CancellationTokenSource cts = new();

    private List<Sensor> Sensors { get; set; } = new();
    private List<EmailNotification> EmailNotifications { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync();
        ApiKey = await UserService.GetUserApiKey(user.Id);

        EmailNotifications = await UserService.GetEmailNotifications(user.Id);
        Sensors = await SensorsService.GetSensors(user.Id);
    }

    public async void CreateApiKey()
    {
        var key = await UserService.SetUserApiKey(user.Id);

        ApiKey = key.ApiKeyId;

        await InvokeAsync(StateHasChanged);
    }

    private async void DeleteApiKey()
    {
        var dialog = await DialogService.ShowConfirmationAsync($"Do you want to delete your API Key? {Environment.NewLine} WARNING: THIS WILL DELETE ALL YOUR SENSOR DATA AND VISUALISATIONS", "Yes", "No", "Delete API Key confirmation");

        var dialogResult = await dialog.Result;

        if (!dialogResult.Cancelled)
        {
            var result = await UserService.DeleteUserApiKeyAsync(ApiKey!);

            if (result)
            {
                ApiKey = null;
                Sensors = new();
                await InvokeAsync(StateHasChanged);

                ToastService.ShowSuccess("API Key has been deleted successfully.", 5000);
            }
            else ToastService.ShowError("There was an error deleting the key.", 5000);
        }
    }

    private async void SetupEmailNotification()
    {
        EmailNotification emailNotification = new() { UserId = user.Id };

        var dialog = await DialogService.ShowDialogAsync<SetEmailNotificationDialog>(emailNotification, new DialogParameters()
        {
            Height = "500px",
            Width = "700px",
            Title = $"Set up a new email alert",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
            ShowDismiss = false
        });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            emailNotification = (EmailNotification)result.Data;

            var setupResult = await UserService.AddEmailNotification(emailNotification);

            if (setupResult)
            {
                EmailNotifications = await UserService.GetEmailNotifications(user.Id);
                await InvokeAsync(StateHasChanged);

                ToastService.ShowCommunicationToast(new ToastParameters<CommunicationToastContent>()
                    {
                        Intent = ToastIntent.Success,
                        Title = "Email alert result",
                        Timeout = 5000,
                        Content = new CommunicationToastContent()
                        {
                            Details = "Email alert has been set up successfully!",
                        }
                    });
            }
            else
            {
                ToastService.ShowCommunicationToast(new ToastParameters<CommunicationToastContent>()
                    {
                        Intent = ToastIntent.Error,
                        Title = "Email alert result",
                        Timeout = 5000,
                        Content = new CommunicationToastContent()
                        {
                            Details = "There was an error setting up the email alert!",
                        }
                    });
            }
        }
    }

    private async void OpenEmailNotificationsDialog()
    {
        var dialog = await DialogService.ShowDialogAsync<EmailNotificationsDialog>(EmailNotifications, new DialogParameters()
            {
                Height = "600px",
                Width = "800px",
                Title = $"Your email alerts",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
                ShowDismiss = false
            });

        var result = await dialog.Result;
        List<EmailNotification> notificationsList = new();
        if (result.Data != null) notificationsList = (List<EmailNotification>)result.Data;

        if (notificationsList.Count < 1) await InvokeAsync(StateHasChanged);
    }

    private async void AddSensor()
    {
        Sensor sensor = new() { UserId = user.Id, ApiKey = ApiKey, CreatedAt = DateTimeOffset.Now };

        var dialog = await DialogService.ShowDialogAsync<SensorFormDialog>(sensor, new DialogParameters()
        {
            Height = "400px",
            Width = "400px",
            Title = $"Add a new Sensor",
            PreventDismissOnOverlayClick = true,
            PreventScroll = true,
            ShowDismiss = false
        });

        var result = await dialog.Result;

        if (!result.Cancelled && result.Data != null)
        {
            sensor = (Sensor)result.Data;

            var addResult = await SensorsService.AddSensor(sensor);
            Sensors.Add(sensor);
            await InvokeAsync(StateHasChanged);

            if (addResult)
            {
                ToastService.ShowCommunicationToast(new ToastParameters<CommunicationToastContent>()
                    {
                        Intent = ToastIntent.Success,
                        Title = "Add Sensor result",
                        Timeout = 5000,
                        Content = new CommunicationToastContent()
                        {
                            Details = $"Sensor with the name {sensor.Name} has been added!",
                        }
                    });
            }
            else
            {
                ToastService.ShowCommunicationToast(new ToastParameters<CommunicationToastContent>()
                    {
                        Intent = ToastIntent.Error,
                        Title = "Add Sensor result",
                        Timeout = 5000,
                        Content = new CommunicationToastContent()
                        {
                            Details = $"There was an error adding the sensor.",
                        }
                    });
            }
        }
    }

    private async void DeleteSensor(string id)
    {
        var sensor = Sensors.Find(s => s.Id == id);
        var dialog = await DialogService.ShowConfirmationAsync($"Do you want to delete sensor {sensor!.Name}? {Environment.NewLine}" + 
                    "WARNING: THIS WILL DELETE ALL OF THIS SENSOR'S DATA AND VISUALISATIONS", "Yes", "No", "Delete API Key confirmation");

        var dialogResult = await dialog.Result;

        if (!dialogResult.Cancelled)
        {
            var result = await SensorsService.DeleteSensor(id, sensor.Name);

            if (result)
            {
                Sensors.Remove(sensor);
                await InvokeAsync(StateHasChanged);

                ToastService.ShowSuccess($"Sensor {sensor.Name} has been deleted successfully.", 5000);
            }
            else ToastService.ShowError("There was an error deleting the sensor.", 5000);
        }
    }

    async Task CopyToClipboard()
    {
        await ClipboardService.WriteTextAsync(ApiKey!);
        await Task.Delay(TimeSpan.FromSeconds(2), cts.Token);
    }

    public void Dispose()
    {
        cts.Cancel(); // Cancel Task.Delay
        cts.Dispose();
    }
}
