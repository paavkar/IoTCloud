@page "/dashboard"
@rendermode InteractiveServer

@implements IDisposable

@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager
@inject ClipboardService ClipboardService
@inject IUserService UserService
@inject IDialogService DialogService
@inject IReadingsService RS
@inject IGraphsService GS
@inject IToastService ToastService

@attribute [Authorize]

<PageTitle>Dashboard</PageTitle>

<FluentLabel Typo="Typography.H3">Dashboard</FluentLabel>

<FluentStack Style="margin-top: 1em;">
    <FluentButton Style="margin-top: 0.6em;" BackgroundColor="green" Color="white" Appearance="Appearance.Accent" OnClick="CreateApiKey">Create new API Key</FluentButton>
    @if (ApiKey is not null)
    {
        <FluentAccordion Style="margin-left: 1em; width: 40%;">
            <FluentAccordionItem Style="background-color: green;" Heading="Your API key">
                @ApiKey
                <FluentIcon Id="apiKeyTooltipIcon" OnClick="CopyToClipboard" Style="cursor: pointer;" Icon="Icons.Regular.Size20.Copy" />
                <FluentTooltip Anchor="apiKeyTooltipIcon">Click to copy API key.</FluentTooltip>
            </FluentAccordionItem>
        </FluentAccordion>

        <FluentButton BackgroundColor="green" Color="white" Appearance="Appearance.Accent" OnClick="DeleteApiKey">Delete your API key.</FluentButton>
    }
    else
    {
        <FluentLabel Style="margin-left: 1em;">You do not have an existing API key. Click the button to create one.</FluentLabel>
    }
</FluentStack>

<FluentDivider Style="margin-top: 1em;" />

<FluentLabel Typo="Typography.H3">Sensor data</FluentLabel>

<FluentStack Style="margin-top: 1em;" Orientation="Orientation.Vertical">
    <FluentStack>
        <FluentButton BackgroundColor="green" Color="white" Appearance="Appearance.Accent" OnClick="AddGraph">Add data graph</FluentButton>
        @if (DistanceReadings.Any() || LuminosityReadings.Any() || TemperatureReadings.Any() || VelocityReadings.Any())
        {
            <FluentButton BackgroundColor="green" Color="white" Appearance="Appearance.Accent" OnClick="SetupEmailNotification" >Set up email notification</FluentButton>
        }
        @if (DistanceReadings.Any())
        {
            <FluentButton BackgroundColor="red" Color="white" Appearance="Appearance.Accent" OnClick="RemoveDistanceReadings">Remove Distance Readings</FluentButton>
        }
        @if (LuminosityReadings.Any())
        {
            <FluentButton BackgroundColor="red" Color="white" Appearance="Appearance.Accent" OnClick="RemoveLuminosityReadings">Remove Luminosity Readings</FluentButton>
        }
        @if (TemperatureReadings.Any())
        {
            <FluentButton BackgroundColor="red" Color="white" Appearance="Appearance.Accent" OnClick="RemoveTemperatureReadings">Remove Temperature Readings</FluentButton>
        }
        @if (VelocityReadings.Any())
        {
            <FluentButton BackgroundColor="red" Color="white" Appearance="Appearance.Accent" OnClick="RemoveVelocityReadings">Remove Velocity Readings</FluentButton>
        }
    </FluentStack>

    <Charts Graphs="Graphs" 
        DistanceReadings="DistanceReadings" 
        LuminosityReadings="LuminosityReadings"
        TemperatureReadings="TemperatureReadings"
        VelocityReadings="VelocityReadings"
        OnRemoveGraph="RemoveGraph" />
</FluentStack>


@code {
    private ApplicationUser user = default!;

    private string? ApiKey { get; set; }

    CancellationTokenSource cts = new();

    private List<GraphItem> Graphs { get; set; } = new();
    private List<DistanceReading> DistanceReadings { get; set; } = new();
    private List<LuminosityReading> LuminosityReadings { get; set; } = new();
    private List<TemperatureReading> TemperatureReadings { get; set; } = new();
    private List<VelocityReading> VelocityReadings { get; set; } = new();

    private Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync();
        ApiKey = await UserService.GetUserApiKey(user.Id);

        Graphs = await GS.GetUserGraphs(user.Id);
        foreach (var graph in Graphs)
        {
            await GetReadings(graph);
        }

        timer = new (async _ =>
        {
            foreach (var graph in Graphs)
            {
                await GetReadings(graph);
            }
            await InvokeAsync(StateHasChanged);
        }, null, 0, 15000);
    }

    private async Task GetReadings(GraphItem item)
    {
        switch (item.DataType)
        {
            case "DistanceReading":
                DistanceReadings = await RS.GetDistanceReadings(user.Id);
                break;
            case "LuminosityReading":
                LuminosityReadings = await RS.GetLuminosityReadings(user.Id);
                break;
            case "TemperatureReading":
                TemperatureReadings = await RS.GetTemperatureReadings(user.Id);
                break;
            case "VelocityReading":
                VelocityReadings = await RS.GetVelocityReadings(user.Id);
                break;
        }
    }

    public async void CreateApiKey()
    {
        var key = await UserService.SetUserApiKey(user.Id);

        ApiKey = key.ApiKeyId;
        StateHasChanged();
    }

    public async void AddGraph()
    {
        var dialog = await DialogService.ShowDialogAsync<DataGraphDialog>(new GraphItem(), new DialogParameters()
            {
                Height = "300px",
                Title = $"Add a new data graph",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            GraphItem item = (GraphItem)result.Data;

            await GS.AddUserGraph(item, user.Id);

            await GetReadings(item);
            Graphs.Add(item);
            StateHasChanged();
        }
    }

    private async Task DeleteApiKey()
    {
        var result = await UserService.DeleteUserApiKeyAsync(ApiKey!);

        if (result) 
        {
            ApiKey = null;
            ToastService.ShowSuccess("API Key has been deleted successfully.", 5000);
        }
        else ToastService.ShowError("There was an error deleting the key.", 5000);
    }

    private async Task RemoveDistanceReadings()
    {
        var result = await RS.RemoveDistanceReadings(user.Id);

        if (result)
        {
            DistanceReadings = new();
        }
    }

    private async Task RemoveLuminosityReadings()
    {
        var result = await RS.RemoveLuminosityReadings(user.Id);

        if (result)
        {
            DistanceReadings = new();
        }
    }

    private async Task RemoveTemperatureReadings()
    {
        var result = await RS.RemoveTemperatureReadings(user.Id);

        if (result)
        {
            DistanceReadings = new();
        }
    }

    private async Task RemoveVelocityReadings()
    {
        var result = await RS.RemoveVelocityReadings(user.Id);

        if (result)
        {
            DistanceReadings = new();
        }
    }

    private async Task RemoveGraph(string id)
    {
        var result = await GS.DeleteGraph(id);

        if (result)
        {
            Graphs.Remove(Graphs.Find(g => g.Id == id));
        }
    }

    private async void SetupEmailNotification()
    {
        EmailNotification emailNotification = new() { UserId = user.Id };

        var dialog = await DialogService.ShowDialogAsync<SetEmailNotificationDialog>(emailNotification, new DialogParameters()
            {
                Height = "600px",
                Title = $"Set up a new email notification",
                PreventDismissOnOverlayClick = true,
                PreventScroll = true,
            });

        var result = await dialog.Result;
        if (!result.Cancelled && result.Data != null)
        {
            emailNotification = (EmailNotification)result.Data;

            var setupResult = await UserService.AddEmailNotification(emailNotification);

            if (setupResult)
            {
                ToastService.ShowCommunicationToast(new ToastParameters<CommunicationToastContent>()
                    {
                        Intent = ToastIntent.Success,
                        Title = "Email notification result",
                        Timeout = 5000,
                        Content = new CommunicationToastContent()
                        {
                            Details = "Email notification has been set up successfully!",
                        }
                    });
            }
            else
            {
                ToastService.ShowCommunicationToast(new ToastParameters<CommunicationToastContent>()
                    {
                        Intent = ToastIntent.Error,
                        Title = "Email notification result",
                        Timeout = 5000,
                        Content = new CommunicationToastContent()
                        {
                            Details = "There was an error setting up the email notification!",
                        }
                    });
            }
        }
    }

    async Task CopyToClipboard()
    {
        await ClipboardService.WriteTextAsync(ApiKey!);
        await Task.Delay(TimeSpan.FromSeconds(2), cts.Token);
    }

    public void Dispose()
    {
        cts.Cancel(); // Cancel Task.Delay
        cts.Dispose();
        timer?.Dispose();
    }
}
